{"version":3,"sources":["static/img/navigation.svg","static/img/marker.svg","static/img/parking-marker.svg","global/values.ts","api/api.ts","components/Layers/Weather/WeatherPopup/WindArrow/wind-arrow.tsx","components/Layers/Weather/WeatherPopup/weather-popup.tsx","components/Loader/loader.tsx","components/Layers/Weather/weather-layer.tsx","components/Layers/Parkings/parking-popup.tsx","components/Layers/Parkings/parkings-layer.tsx","components/Layers/RoadSegments/road-segments-layer.tsx","components/Map/map-container.tsx","components/Header/header.tsx","global/shared_components/Checkbox/checkbox.tsx","components/MenuPanel/menu-panel.tsx","components/InfoTab/info-tab.tsx","components/MainContainer/main-container-page.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","MapMarker","L","Icon","iconUrl","require","iconSize","iconAnchor","popupAnchor","ParkingMarker","values","tileSource","ext","attribution","centerCoordinates","setRequestUrl","type","requestData","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","requestType","res","wrap","_context","prev","next","fetch","concat","sent","json","abrupt","stop","_x","apply","this","arguments","WindArrow","props","direction","react_default","createElement","alt","className","src","arrow","style","transform","WeatherPopup","id","street","airTemperature","surfaceTemperature","windDirection","react","Popup","WindArrow_wind_arrow","Loader","WeatherLayer","_useState","useState","_useState2","slicedToArray","stations","getStations","useEffect","getData","then","stationsData","concatData","weatherStations","map","item","matched","filter","s","weatherStationId","assign","length","coords","location","coordinates","Marker","position","LatLng","key","icon","weather_popup","Loader_loader","ParkingPopup","address","capacity","freePlaces","update","valueDisplay","val","undefined","Fragment","ParkingsLayer","parkings","getParkings","parkingsData","parkingId","objectSpread","parking_popup","insertTime","RoadSegmentsLayer","roads","setRoads","roadsData","roadData","roadSegment","convertCoords","coordSet","intensity","geometry","Polyline","positions","color","MapContainer","activeLayer","cityBoundaries","setBoundaries","_useState3","mapZoom","cityPolygon","boundaries","features","Map","center","zoom","height","TileLayer","url","Polygon","fillColor","weather_layer","parkings_layer","road_segments_layer","renderLayer","Header","Checkbox","text","handleChange","value","name","initialChecked","onChange","defaultChecked","MenuPanel","handleLayerChange","switchHandler","Header_header","shared_components_Checkbox_checkbox","InfoTab","href","target","MainContainer","setLayer","MenuPanel_menu_panel","layer","Map_map_container","InfoTab_info_tab","App","main_container_page","Boolean","window","hostname","match","ReactDOM","render","components_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1ca97877.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/navigation.414164e5.svg\";","module.exports = __webpack_public_path__ + \"static/media/marker.6a7000a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/parking-marker.63ef69d0.svg\";","import L from \"leaflet\"\r\n\r\ninterface IValues {\r\n  tileSource: string\r\n  ext?: string\r\n  attribution: string\r\n  centerCoordinates: [number, number]\r\n}\r\n\r\nexport const MapMarker = new L.Icon({\r\n  iconUrl: require(\"../static/img/marker.svg\"),\r\n  iconSize: [30, 45],\r\n  iconAnchor: [12, 36],\r\n  popupAnchor: [3, -25]\r\n})\r\n\r\nexport const ParkingMarker = new L.Icon({\r\n  iconUrl: require(\"../static/img/parking-marker.svg\"),\r\n  iconSize: [30, 45],\r\n  iconAnchor: [12, 36],\r\n  popupAnchor: [3, -25]\r\n})\r\n\r\nconst values: IValues = {\r\n  tileSource: \"https://stamen-tiles-{s}.a.ssl.fastly.net/toner-lite/{z}/{x}/{y}{r}.png\",\r\n  ext: \"png\",\r\n  attribution: `&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors`,\r\n  centerCoordinates: [54.5, 18.47]\r\n}\r\n\r\nexport default values\r\n","const proxyUrl = \"https://cors-anywhere.herokuapp.com/\"\r\n\r\nconst setRequestUrl = (type: string): string => {\r\n  switch(type) {\r\n    case \"weatherStations\":\r\n      return \"http://api.zdiz.gdynia.pl/ri/rest/weather_stations\";\r\n    case \"weatherStationsData\":\r\n      return \"http://api.zdiz.gdynia.pl/ri/rest/weather_stations_data\";\r\n    case \"parkings\":\r\n      return \"http://api.zdiz.gdynia.pl/ri/rest/parkings\";\r\n    case \"parkingsData\":\r\n      return \"http://api.zdiz.gdynia.pl/ri/rest/parking_places\";\r\n    case \"roads\":\r\n      return \"http://api.zdiz.gdynia.pl/ri/rest/road_segments\";\r\n    case \"roadsData\":\r\n      return \"http://api.zdiz.gdynia.pl/ri/rest/traffic_intensities?segmentId=00111\";\r\n    default:\r\n      return \"\";\r\n  }\r\n}\r\n\r\nexport const requestData = async (requestType: string): Promise<any> => {\r\n  const res = await fetch(`${proxyUrl}${setRequestUrl(requestType)}`)\r\n  return await res.json()\r\n}\r\n","import React from \"react\";\r\nimport arrow from \"../../../../../static/img/navigation.svg\";\r\nimport \"./wind-arrow.scss\";\r\n\r\ninterface IArrowProps {\r\n  direction: number;\r\n}\r\n\r\nconst WindArrow: React.FC<IArrowProps> = props => {\r\n  const { direction } = props;\r\n  return (\r\n    <img\r\n      alt=\"wind-indicator\"\r\n      className=\"arrow\"\r\n      src={arrow}\r\n      style={{ transform: `rotate(${direction}deg)` }}\r\n    />\r\n  );\r\n};\r\n\r\nexport default WindArrow;\r\n","import * as React from \"react\";\r\nimport { Popup } from \"react-leaflet\";\r\nimport { IStation } from \"../../../../api/api-types\";\r\nimport WindArrow from \"./WindArrow/wind-arrow\";\r\n\r\ninterface IStationProps {\r\n  station?: IStation;\r\n  id: number;\r\n  street: string;\r\n  airTemperature: number;\r\n  surfaceTemperature: number;\r\n  windDirection: number;\r\n}\r\n\r\nconst WeatherPopup: React.FC<IStationProps> = props => {\r\n  const {\r\n    id,\r\n    street,\r\n    airTemperature,\r\n    surfaceTemperature,\r\n    windDirection\r\n  } = props;\r\n\r\n  return (\r\n    <>\r\n      <Popup>\r\n        <p>Identyfikator stacji: {id || \"Brak danych\"}</p>\r\n        <p>Lokalizacja: {street || \"Brak danych\"}</p>\r\n        <p>Temperatura powietrza: {airTemperature || \"Brak danych\"}</p>\r\n        <p>Temperatura powierzchni: {surfaceTemperature || \"Brak danych\"}</p>\r\n        <p>\r\n          Kierunek wiatru:{\" \"}\r\n          {<WindArrow direction={windDirection} /> || \"Brak danych\"}\r\n        </p>\r\n      </Popup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WeatherPopup;\r\n","import React from \"react\"\r\nimport \"./loader.scss\";\r\n\r\ninterface LoaderProps { }\r\n\r\nconst Loader: React.FC<LoaderProps> = () => {\r\n\r\n  return (\r\n    <div className=\"loader__container\">\r\n      <div className=\"loader__spinner\"></div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Loader\r\n","import * as React from \"react\"\r\nimport { useState, useEffect } from \"react\"\r\nimport { Marker } from \"react-leaflet\"\r\nimport L from \"leaflet\"\r\nimport { requestData } from \"../../../api/api\"\r\nimport { IStation } from \"../../../api/api-types\"\r\nimport { MapMarker } from \"../../../global/values\"\r\nimport WeatherPopup from \"./WeatherPopup/weather-popup\"\r\nimport Loader from \"../../Loader/loader\";\r\n\r\nconst WeatherLayer: React.FC = () => {\r\n  const [stations, getStations] = useState<[]>([])\r\n\r\n  useEffect(() => {\r\n    const data = getData()\r\n    data.then(res => {\r\n      getStations(res)\r\n    })\r\n  }, [])\r\n\r\n  const getData = async () => {\r\n    const stations = await requestData(\"weatherStations\")\r\n    const stationsData = await requestData(\"weatherStationsData\")\r\n    return concatData(stations, stationsData)\r\n  }\r\n\r\n  const concatData = (stations: any, stationsData: []) => {\r\n    const wStations = stations.weatherStations\r\n    return wStations.map((item: any) => {\r\n      const matched = stationsData.filter((s: any) => s.weatherStationId === item.id)\r\n      return Object.assign({}, item, matched[0])\r\n    })\r\n  }\r\n\r\n  const convertCoords = (coords: [number, number]) => {\r\n    return new L.LatLng(coords[1], coords[0])\r\n  }\r\n  const renderWeatherStations = () => {\r\n    const stationList: IStation[] = stations\r\n    return stationList.map((s: IStation) => {\r\n      const location = s.location.coordinates\r\n      return (\r\n        <Marker position={convertCoords(location)} key={s.id} id={3} icon={MapMarker}>\r\n          <WeatherPopup\r\n            id={s.weatherStationId}\r\n            street={s.street}\r\n            airTemperature={s.airTemperature}\r\n            surfaceTemperature={s.surfaceTemperature}\r\n            windDirection={s.windDirection}\r\n          />\r\n        </Marker>\r\n      )\r\n    })\r\n  }\r\n\r\n  return <>{stations.length ? renderWeatherStations() : <Loader />}</>\r\n}\r\n\r\nexport default WeatherLayer\r\n","import React from \"react\";\r\nimport { Popup } from \"react-leaflet\";\r\nimport { IParking } from \"../../../api/api-types\";\r\n\r\ninterface IParkingProps {\r\n  parking?: IParking;\r\n  id: number;\r\n  address: string;\r\n  capacity: number;\r\n  freePlaces: number;\r\n  update: string;\r\n}\r\n\r\nconst ParkingPopup: React.FC<IParkingProps> = props => {\r\n  const { address, capacity, freePlaces, update } = props;\r\n\r\n  const valueDisplay = (val: any) => (val !== undefined ? val : \"Brak danych\");\r\n\r\n  return (\r\n    <>\r\n      <Popup>\r\n        <p>Adres: {valueDisplay(address)} </p>\r\n        <p>Ogółem miejsc: {valueDisplay(capacity)}</p>\r\n        <p>Wolnych miejsc: {valueDisplay(freePlaces)}</p>\r\n        <p>Ostatnia aktualizacja: {valueDisplay(update)}</p>\r\n      </Popup>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ParkingPopup;\r\n","import * as React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport { Marker } from \"react-leaflet\";\r\nimport L from \"leaflet\";\r\nimport { IParking } from \"../../../api/api-types\";\r\nimport { requestData } from \"../../../api/api\";\r\nimport { ParkingMarker } from \"../../../global/values\";\r\nimport ParkingPopup from \"./parking-popup\";\r\nimport Loader from \"../../Loader/loader\";\r\n\r\nconst ParkingsLayer: React.FC = () => {\r\n  const [parkings, getParkings] = useState<[]>([]);\r\n\r\n  useEffect(() => {\r\n    const data = getData();\r\n    data.then(res => {\r\n      getParkings(res);\r\n    });\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    const parkings = await requestData(\"parkings\");\r\n    const parkingsData = await requestData(\"parkingsData\");\r\n    return concatData(parkings, parkingsData);\r\n  };\r\n\r\n  const concatData = (parkings: any, parkingsData: []) => {\r\n    const wStations = parkings.parkings;\r\n    return wStations.map((item: any) => {\r\n      const matched = parkingsData.filter((s: any) => s.parkingId === item.id);\r\n      return { ...item, ...(matched[0] as Record<string, any>) };\r\n    });\r\n  };\r\n\r\n  const convertCoords = (coords: [number, number]) => {\r\n    return new L.LatLng(coords[1], coords[0]);\r\n  };\r\n\r\n  const renderParkingPlaces = () => {\r\n    const parkingsList: IParking[] = parkings;\r\n    return parkingsList.map((s: IParking) => {\r\n      const location = s.location.coordinates;\r\n      return (\r\n        <Marker\r\n          position={convertCoords(location)}\r\n          key={s.id}\r\n          id={3}\r\n          icon={ParkingMarker}\r\n        >\r\n          <ParkingPopup\r\n            id={s.id}\r\n            address={s.address}\r\n            capacity={s.capacity}\r\n            freePlaces={s.freePlaces}\r\n            update={s.insertTime}\r\n          />\r\n        </Marker>\r\n      );\r\n    });\r\n  };\r\n\r\n  return <>{parkings.length ? renderParkingPlaces() : <Loader />}</>;\r\n};\r\n\r\nexport default ParkingsLayer;\r\n","import React from \"react\";\r\nimport { useState, useEffect } from \"react\";\r\nimport L from \"leaflet\";\r\nimport { Polyline } from \"react-leaflet\";\r\nimport { requestData } from \"../../../api/api\";\r\nimport Loader from \"../../Loader/loader\";\r\n\r\nconst RoadSegmentsLayer: React.FC<any> = () => {\r\n  const [roads, setRoads] = useState<[]>([]);\r\n\r\n  useEffect(() => {\r\n    const data = getData();\r\n    data.then((res: any) => {\r\n      setRoads(res);\r\n    });\r\n  }, []);\r\n\r\n  const getData = async () => {\r\n    const roads = await requestData(\"roads\")\r\n    const roadsData = await requestData(\"roadsData\");\r\n    return concatData(roads[\"road_segments\"], roadsData);\r\n  };\r\n\r\n  const concatData = (roads: [], roadsData: []) => {\r\n    return roadsData.map(roadData => {\r\n      const matched = roads.filter(\r\n        (roadSegment: any) => roadSegment.id === roadData[\"roadSegmentId\"]\r\n      );\r\n      return Object.assign({}, roadData, matched[0]);\r\n    });\r\n  };\r\n\r\n  const convertCoords = (coords: number[][]) => {\r\n    return coords.map(\r\n      (coordSet: number[]) => new L.LatLng(coordSet[1], coordSet[0])\r\n    );\r\n  };\r\n\r\n  const intensityColors = (intensity: number) => {\r\n    if (intensity < 500) {\r\n      return \"#1b700b\";\r\n    } else if (intensity < 1000) {\r\n      return \"#6bbe2a\";\r\n    } else if (intensity < 2000) {\r\n      return \"#dd7f48\";\r\n    } else if (intensity < 3000) {\r\n      return \"#942c23\";\r\n    } else {\r\n      return \"#b71540\";\r\n    }\r\n  };\r\n\r\n  const renderRoadsSegments = (): JSX.Element => {\r\n    const roadsList: any = roads;\r\n    return roadsList.map((s: any) => {\r\n      const coords = s.geometry.coordinates;\r\n      return (\r\n        <Polyline\r\n          key={s.id}\r\n          positions={convertCoords(coords)}\r\n          color={intensityColors(s.intensity)}\r\n        />\r\n      );\r\n    });\r\n  };\r\n\r\n  return <>{roads.length ? renderRoadsSegments() : <Loader />}</>;\r\n};\r\n\r\nexport default RoadSegmentsLayer;\r\n","import React, { useEffect } from \"react\";\r\nimport { useState } from \"react\";\r\nimport { Map, Polygon, TileLayer } from \"react-leaflet\";\r\nimport values from \"../../global/values\";\r\nimport WeatherLayer from \"../Layers/Weather/weather-layer\";\r\nimport ParkingsLayer from \"../Layers/Parkings/parkings-layer\";\r\nimport \"./map-container.scss\";\r\nimport RoadSegmentsLayer from \"../Layers/RoadSegments/road-segments-layer\";\r\nimport boundaries from \"../../geojson/boundaries.json\";\r\nimport L from \"leaflet\";\r\n\r\ninterface IMapContainer {\r\n  activeLayer: string;\r\n}\r\n\r\nconst MapContainer: React.FC<IMapContainer> = ({ activeLayer }) => {\r\n  const [cityBoundaries, setBoundaries] = useState<number[][]>([])\r\n  const [mapZoom] = useState<number>(12);\r\n\r\n  useEffect(() => {\r\n    const cityPolygon = boundaries.features[0].geometry.coordinates[0];\r\n    setBoundaries(cityPolygon)\r\n  });\r\n\r\n  const convertCoords = (coords: number[][]) => {\r\n    return coords.map(\r\n      (coordSet: number[]) => new L.LatLng(coordSet[1], coordSet[0])\r\n    );\r\n  };\r\n\r\n  const renderLayer = () => {\r\n    switch (activeLayer) {\r\n      case \"weather\":\r\n        return <WeatherLayer />;\r\n      case \"parkings\":\r\n        return <ParkingsLayer />;\r\n      case \"traffic\":\r\n        return <RoadSegmentsLayer />;\r\n      default:\r\n        return <></>;\r\n    }\r\n  };\r\n  const position = values.centerCoordinates;\r\n\r\n  return (\r\n    <div className=\"map__container\">\r\n      <Map\r\n        center={position}\r\n        zoom={mapZoom}\r\n        className=\"map\"\r\n        style={{ height: \"100vh\" }}\r\n      >\r\n        <TileLayer\r\n          attribution={values.attribution}\r\n          url={values.tileSource}\r\n          ext={values.ext}\r\n        />\r\n        <Polygon positions={convertCoords(cityBoundaries)} color=\"#797676\" fillColor=\"transparent\" />\r\n        {renderLayer()}\r\n      </Map>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapContainer;\r\n","import React from \"react\"\r\nimport \"./header.scss\"\r\n\r\nconst Header: React.FC = () => {\r\n  return <div className=\"header\">Gdynia Open Data Viewer</div>\r\n}\r\n\r\nexport default Header\r\n","import React from \"react\"\r\nimport \"./checkbox.scss\";\r\n\r\ninterface CheckboxProps {\r\n  text: string;\r\n  id: string;\r\n  value: string;\r\n  name: string;\r\n  handleChange: Function;\r\n  initialChecked?: boolean;\r\n}\r\n\r\nconst Checkbox: React.FC<CheckboxProps> = ({text, handleChange, id, value, name, initialChecked}) => {\r\n\r\n  const handleInputChange = (val: string) => {\r\n    handleChange(val)\r\n  }\r\n\r\n  return (\r\n    <label className=\"checkbox__label\">\r\n      <span>{text}</span>\r\n      <input\r\n        name={name}\r\n        type=\"radio\"\r\n        className=\"checkbox__input\"\r\n        value={value}\r\n        onChange={() => handleInputChange(value)}\r\n        defaultChecked={initialChecked}\r\n        id={id}\r\n      />\r\n      <span className=\"checkbox__indicator\"></span>\r\n    </label>\r\n  )\r\n}\r\n\r\nexport default Checkbox\r\n","import React from \"react\"\r\nimport \"./menu-panel.scss\"\r\nimport Header from \"../Header/header\";\r\nimport Checkbox from \"../../global/shared_components/Checkbox/checkbox\";\r\n\r\ninterface IMenuPanel {\r\n  handleLayerChange: Function\r\n}\r\n\r\nconst MenuPanel: React.FC<IMenuPanel> = ({ handleLayerChange }) => {\r\n\r\n  const switchHandler = (value: string) => {\r\n    handleLayerChange(value)\r\n  }\r\n\r\n  return (\r\n    <div className=\"menu__container\">\r\n      <Header />\r\n      <h2 className=\"menu__header\">Wybierz warstwę</h2>\r\n      <div className=\"menu__content\">\r\n        <Checkbox\r\n          text=\"Brak warstw\"\r\n          id=\"none\"\r\n          handleChange={switchHandler}\r\n          value=\"\"\r\n          name=\"chosen-layer\"\r\n          initialChecked={true}\r\n        />\r\n        <Checkbox\r\n          text=\"Dane pogodowe\"\r\n          id=\"weather\"\r\n          handleChange={switchHandler}\r\n          value=\"weather\"\r\n          name=\"chosen-layer\"\r\n        />\r\n        <Checkbox\r\n          text=\"Miejsca parkingowe\"\r\n          id=\"parkings\"\r\n          handleChange={switchHandler}\r\n          value=\"parkings\"\r\n          name=\"chosen-layer\"\r\n        />\r\n        <Checkbox\r\n          text=\"Dane o ruchu\"\r\n          id=\"traffic\"\r\n          handleChange={switchHandler}\r\n          value=\"traffic\"\r\n          name=\"chosen-layer\"\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MenuPanel\r\n","import React from \"react\";\r\nimport \"./info-tab.scss\";\r\n\r\nconst InfoTab = () => {\r\n  return (\r\n    <div className=\"info-tab__container\">\r\n      <a className=\"info-tab__author\" href=\"https://michalmuszynski.com\" target=\"_blank\">Autor</a>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default InfoTab;\r\n","import React, { useState } from \"react\";\r\nimport \"./main-container.scss\";\r\nimport MapContainer from \"../Map/map-container\";\r\nimport MenuPanel from \"../MenuPanel/menu-panel\";\r\nimport InfoTab from \"../InfoTab/info-tab\";\r\n\r\nconst MainContainer: React.FC = () => {\r\n  const [activeLayer, setLayer] = useState(\"\")\r\n\r\n  const switchLayer = (layer: string) => {\r\n    setLayer(layer)\r\n  }\r\n\r\n  return (\r\n    <div className=\"main__container\">\r\n      <MenuPanel handleLayerChange={switchLayer}/>\r\n      <MapContainer activeLayer={activeLayer} />\r\n      <InfoTab />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainContainer;\r\n","import * as React from \"react\"\r\nimport \"./app.scss\";\r\nimport MainContainer from \"../MainContainer/main-container-page\"\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"app__container\">\r\n      <MainContainer />\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './components/App/App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}